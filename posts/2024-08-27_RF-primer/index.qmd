---
title: "A non-statistician's guide to random forests"
author: Evan Muise
date: "2021"
abstract: Random Forest is a powerful ensemble machine learning algorithm suitable for both classification and regression problems. By combining bootstrap aggregation with decision trees and the random subspace method, Random Forest becomes a more accurate predictor than individual, or even bagged regression trees. In this blog, the major statistical concepts behind the algorithm are discussed, alongside assumptions and disgnostics associated with the technique. A literature review is conducted concerning the use of the algorithm in various fields, including ecology, geography, and remote sensing. R packages and other software available to utilize the algorithm are presented.
bibliography: references.bib
---

A note: This document was created for GEOB503 at the University of British Columbia in May of 2021. A full document can be found at:

# Introduction

Random Forest is a powerful algorithm developed by Breiman [-@breiman2001] for both classification and regression. It is an incredibly robust machine learning algorithm which is commonly used in many fields of study, including remote sensing [@belgiu2016; @chan2008; @pal2005; @rodriguez-galiano2012], ecological modelling [@death2007; @cutler2007], and economic geology [@rodriguez-galiano2015], amongst many other fields. Random Forest is a combination of classification and regression trees (CART), and bagging (bootstrap aggregation), and is considered an ensemble method [@breiman2001]. This paper will delve into the statistical background behind the components of the Random Forest algorithm, identify assumptions and diagnostic procedures, discuss examples of the algorithm's usage in peer-reviewed literature, identify available packages for implementing the algorithm.

# Statistical Concepts

## Classification and Regression Trees

Classification and regression trees (hereafter CART; also referred to as decision trees) are predictive models that predict output features by creating splits in various attributes in the dataset [@rokach2007]. These splits create nodes, labeled with input features. In the case of a continuous input variable, the node will be split based on being higher or lower than a value in the input variable (e.g. $zmax < 21.02$ at the first node in Figure \@ref(fig:classtree )) In the opposite case, where the input variable is a class (such as land cover), the node will be based on one value versus all others. CART models are scale invariant, can ignore irrelevant features, and are easily interpretable by the end user [@breiman2017]. In addition, CART models can handle highly nonlinear and conditional relationships. However, not all is perfect with these classification trees. They often overfit the model, leading to low bias and high variance. Due to this tendency to overfit, methods such as bagging and boosting are frequently employed to aid with these problems [@sutton2005a].

## Bagging (Bootstrap Aggregation) {#sec-bagging}

Bootstrapping is a resampling method for calculating statistics on a dataset. The specific methodology is to resample with replacement in order to mimic the sampling process. This involves taking a dataset, and selecting the same number of observations, but allowing for the same observation to be reobserved. This allows users to derive estimates of variance and confidence intervals for a single dataset [@breiman1996].

Bagging, or bootstrap aggregation, occurs when a bootstrap resampled dataset is used to create a model multiple times. The results from this ensemble of models is aggregated to generate a predictor from the many models [@breiman1996]. This has been done using all input features in the form of bagged regression trees [@sutton2005a]. Bagging does not reweight the input models to improve accuracy; a simple vote or average is used from all of the bagged models [@sutton2005a]. This ensemble method can have improved accuracy over a single CART model. While the bagged models may have higher accuracy, the same predictors can dominate the models, reducing the potential maximum accuracy [@ho2002].

## Random Forest

While bagged CART models can be a powerful method for classification and regression, with marked improvements over non-ensemble CART models, there is still room for improvement. When strong predictor features are present in the data, it is entirely possible for these few strong predictors to dominate the ensemble [@ho2002]. Where Random Forest differs from bagged regression trees is in the use of the Random Subspace method, which uses a subset of all potential input features to train each tree. The Random Subspace method prevents these strong predicting features from dominating the resultant model [@tinkamho1998].

In summary, the Random Forest algorithm creates many classification and regression tree models based off a bootstrap of the dataset and features [@breiman2001]. These models are then aggregated into an ensemble model by averaging the model outputs (regression), or via votes (classification). This is a powerful advancement from simple CART models, which frequently overfit, and on bagged CART models, which may become dominated by strong predicting features [@breiman2001; @tinkamho1998].

# Assumptions and Diagnostic Procedures

## Assumptions

One of the strengths of Random Forest is the algorithm's robustness. No formal distributions need to be followed, and the algorithm can handle both categorical and numerical data, which can be skewed or multi-modal. The algorithm's robustness leads to the Random Forest being incredibly powerful, and useful in many circumstances for both classification and regression.

## Diagnostics

### Out of Bag Error

The out of bag error is a validation method specifically applied to algorithms making using of the bagging approach outlined in @sec-bagging. For each tree, the model is trained on those samples that are within the bootstrap, and then tested on those that were not included on the bootstrap for each tree. Those that are not included in the bootstrap are termed the "Out of Bag sample", and the error is calculated for each tree as the number of correctly predicted rows from the out of bag sample. It is recorded as each new tree is generated and the ensemble predictions change.

### Variable Importance

Due to the high volume of variables potentially included in a Random Forest model, it can be relevant to the researcher to examine which variables contribute most to the model. This can be accomplished due to the recording of the Out of Bag error after each tree is generated. Each instantaneous (after each tree) error, can be compared to those found after the final trees are produced. This generates a score which can be used to rank the variables. Those with larger scores are considered more important than those with smaller scores [@zhu2015]. It should be noted that there is a bias in Random Forest to favour categorical variables with high numbers of levels, however this can be overcome using other variants on the Random Forest algorithm [@toloi2011; @altmann2010].

### Cohen's Kappa

Cohen's kappa ($k$) is a measurement of categorical accuracy. It can be used with the Random Forest algorithm when used a classifier, but not as a regressor. $k$ includes the possibility of chance agreement, rendering it a more robust measurement than percent agreement. It is calculated using the confusion matrix of a classification algorithm.

```{=tex}
\begin{equation}
  k = \frac{p_o - p_e}{1 - p_e} = 1 - \frac{1 - p_o}{1 - p_e}
  (\#eq:kappa-eq)
\end{equation}
```
The calculation for Cohen's Kappa is shown in Equation \@ref(eq:kappa-eq), where $p_o$ is the observed agreement, and $p_e$ is the hypothetical probability of chance agreement [@cohen1960]. More detailed equations and calculations used in Cohen's kappa for nominal data of many classes can be found in Cohen [-@cohen1960].

### Receiver Operating Characteristic Area Under the Curve

The Receiver Operating Characteristic (ROC) is a diagnostic plot that is used to examine binary classifiers, such as the one used in Section \@ref(technique-application) in Figure \@ref(fig:roc-auc). The ROC plots the false positive rate against the true positive rate for a binary classifier. This shows the performance of the model at all classification thresholds.

The Area Under the Curve (AUC) for the ROC is another diagnostic included in this plot. Higher AUC values are desirable, with a perfect model having an AUC of 1.0. The AUC is scale-invariant, and measures prediction quality regardless of the classification threshold [@fawcett2006].

### Regression Diagnostics

Diagnostic procedures for operating Random Forest as a regression algorithm are similar to other regression diagnostics. The $R^2$ is commonly used alongside various error statistics such as Root Mean Square Error, Mean Absolute Error, among others. These can be compared between model parameters or other types of regression.
